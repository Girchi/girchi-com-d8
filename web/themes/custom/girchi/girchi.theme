<?php

/**
 * @file
 * Functions to support theming in the girchi theme.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;

include drupal_get_path('theme', 'girchi') . '/girchi.theme-suggestions.inc';

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function girchi_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/

    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name === 'view.news.page_1'){

        if (empty(\Drupal::request()->query->get('category') == false)) {

            $termID = \Drupal::request()->query->get('category');
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($termID);
            $category = $term->name->value;

            $title = $variables['head_title']['title'];
            $words = explode('|',$title);
            $variables['head_title']['title'] = "$category |$words[1]" ;

        }
    }

}

/**
 * Implements hook_page_attachments_alter().
 */
function girchi_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function girchi_preprocess_page(array &$variables) {

    //get config from site settings
    $config = \Drupal::config('om_site_settings.site_settings');

    $variables['footer_config'] = [
        'phone' => $config->get('contact_info_phone'),
        'email' => $config->get('contact_info_email'),
        'facebook' => $config->get('social_media_facebook'),
        'twitter' => $config->get('social_media_twitter'),
        'instagram' => $config->get('social_media_instagram'),
        'youtube' => $config->get('social_media_youtube'),
    ];

    $variables['header_config'] = [
        'enable_user_ui' => $config->get('enable_user_ui'),
    ];
    // Redirect from user profile

    // Get current route name
    $route_name = \Drupal::routeMatch()->getRouteName();

    // If current route is user page and user exists
    if ($route_name === 'entity.user.canonical'
        && $user = \Drupal::routeMatch()->getParameter('user')
    ) {
        // Get uid from route
        $uid = (int)$user->id();
        // Get current uid
        $current_uid = (int)$user = \Drupal::currentUser()->id();

        // If the uid from the URL matches with the current uid,
        // redirect to the user edit form, otherwise - to the main page
        if ($uid === $current_uid) {
            $redirect_path = \Drupal\Core\Url::fromRoute(
                'entity.user.edit_form',
                ['user' => $current_uid]
            )->toString();
        } else {
            $redirect_path = '/';
        }

        // Redirect to given utl
        $response = new RedirectResponse($redirect_path);
        $response->send();
    }

    // End Redirect from user profile

    // Logged in use header
   if($currentUserId = \Drupal::currentUser()->id()){
       $account = User::load($currentUserId);
       $avatarEntity = $account->{'user_picture'}->entity;
       if($avatarEntity) {
           $currentUserAvatar = $avatarEntity->url();
       }else{
           $currentUserAvatar = file_create_url( drupal_get_path('theme', 'girchi') . '/images/avatar.png');
       }
       $variables['user_header'] = [
           'first_name' => $account->{'field_first_name'}->value,
           'last_name' => $account->{'field_last_name'}->value,
           'ged' => $account->{'field_ged'}->value ? $account->{'field_ged'}->value : 0,
           'user_picture' => $currentUserAvatar,
           'user_name' => $account->{'name'}->value
       ];
   }
}

/**
 * Implements hook_preprocess_user() for page.html.twig.
 */
function girchi_preprocess_user(array &$variables) {


}


/**
 * Implements hook_theme_suggestions_page_alter().
 */
function girchi_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}


/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function girchi_preprocess_block(array &$variables) {

}


/**
 * Implements hook_theme_suggestions_field_alter().
 */
function girchi_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function girchi_preprocess_node(array &$variables) {
    // Default to turning off byline/submitted.
    //$variables['display_submitted'] = FALSE;
    if ($variables['node']->getType() == 'article') {
        $terms = [];
        $taxonomy_terms = $variables['node']->get('field_category')->referencedEntities();
        foreach ($taxonomy_terms as $term) {
            $terms[$term->getName()] = $term->id();
        }
        $variables['terms']  = $terms;
    }
}

/**
 * Implements hook_preprocess_views_view().
 */
function girchi_preprocess_views_view(&$variables)
{
    if ($variables['id'] == 'news') {
        if (empty($variables['exposed']['category']['#value']) == false) {

            $termID = $variables['exposed']['category']['#value'];
            $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($termID);
            $variables['categoryName'] = $term->name->value;

        }
    }
}


/**
 * Implements hook_preprocess_form().
 */
function girchi_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function girchi_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function girchi_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function girchi_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function girchi_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

function girchi_preprocess_taxonomy_term(&$variables) {
    $term_id = $variables['elements']['#taxonomy_term']->id();
    $variables['term_id'] = $term_id;
}

