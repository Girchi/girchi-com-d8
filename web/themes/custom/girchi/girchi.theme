<?php

/**
 * @file
 * Functions to support theming in the girchi theme.
 */

use Drupal\Core\Url;
use Drupal\views\Views;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;

include drupal_get_path('theme', 'girchi') . '/girchi.theme-suggestions.inc';

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function girchi_preprocess_html(array &$variables)
{
  /* Add class to html tag */
  // $variables['html_attributes']->addClass('no-js');
  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
  $variables['head_title'] = $variables['head_title_array']['name'];
  }*/

  $route_name = \Drupal::routeMatch()->getRouteName();
  $current_uri = \Drupal::request()->getRequestUri();

  if ($current_uri == '/change-password') {
    $uid = \Drupal::currentUser()->id();
    $response = new RedirectResponse('/user/' . $uid . '/change-password');
    $response->send();
  }

  if ($route_name === 'view.news.page_1') {

    if (empty(\Drupal::request()->query->get('category') == FALSE)) {

      $termID = \Drupal::request()->query->get('category');
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($termID);
      $category = $term->name->value;

      $title = $variables['head_title']['title'];
      $words = explode('|', $title);
      $variables['head_title']['title'] = "$category |$words[1]";
    }
  }
  if ($route_name = 'entity.node.canonical') {
    if (preg_match("/\/office\/([0-9]+)$/", $current_uri)) {
      $response = new RedirectResponse('/offices');
      $response->send();
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function girchi_page_attachments_alter(array &$page)
{
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
  '#type' => 'html_tag',
  '#tag' => 'meta',
  '#attributes' => [
  'http-equiv' => 'X-UA-Compatible',
  'content' => 'IE=edge',
  ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function girchi_preprocess_page(array &$variables)
{
  $queryPassReset = \Drupal::request()->query->get('pass-reset');
  if ($queryPassReset == 'success') {
    \Drupal::messenger()->addMessage(t("Your password has been successfully changed. Please log in into your account with new password."));
  }

  $GEDHelper = \Drupal::service('girchi_users.ged_helper');

  // Get config from site settings.
  $config = \Drupal::config('om_site_settings.site_settings');

  /** @var \Drupal\Core\KeyValueStore\KeyValueFactory $keyValue */
  $keyValue = Drupal::service('keyvalue');
  $gedCalculation = $keyValue->get('ged_calculation');

  $variables['footer_config'] = [
    'phone' => $config->get('contact_info_phone'),
    'email' => $config->get('contact_info_email'),
    'facebook' => $config->get('social_media_facebook'),
    'twitter' => $config->get('social_media_twitter'),
    'instagram' => $config->get('social_media_instagram'),
    'youtube' => $config->get('social_media_youtube'),
    'copyright' => $config->get('copyright_text'),
  ];

  $variables['header_config'] = [
    'enable_user_ui' => $config->get('enable_user_ui'),
    'ged_summary' => $gedCalculation->get('ged_summary'),
    'ged_percentage' => $gedCalculation->get('ged_percentage'),
  ];
  // Redirect from user profile.
  // Get current route name.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // If current route is user page and user exists.
  if (
    $route_name === 'entity.user.canonical'
    && $user = \Drupal::routeMatch()->getParameter('user')
  ) {
    // Get uid from route.
    $uid = (int) $user->id();
    // Get current uid.
    $current_uid = (int) $user = \Drupal::currentUser()->id();

    // If the uid from the URL matches with the current uid,
    // redirect to the user edit form, otherwise - to the main page.
    //    if ($uid === $current_uid) {
    //      $redirect_path = Url::fromRoute(
    //        'entity.user.edit_form',
    //        ['user' => $current_uid]
    //      )->toString();
    //    } else {
    //      $redirect_path = '/';
    //    }
    //
    //    // Redirect to given utl.
    //    $response = new RedirectResponse($redirect_path);
    //    $response->send();
  }

  // End Redirect from user profile.
  // Logged in use header.
  if ($currentUserId = \Drupal::currentUser()->id()) {
    $account = User::load($currentUserId);
    /** @var \Drupal\file\Entity\File $avatarEntity */
    $avatarEntity = $account->{'user_picture'}->entity;
    if ($avatarEntity) {
      $currentUserAvatar = $avatarEntity->getFileUri();
      $isAvatar = TRUE;
    } else {
      $currentUserAvatar = file_create_url(drupal_get_path('theme', 'girchi') . '/images/avatar.png');
      $isAvatar = FALSE;
    }

    $variables['user_header'] = [
      'first_name' => $account->{'field_first_name'}->value,
      'last_name' => $account->{'field_last_name'}->value,
      'ged' => $account->{'field_ged'}->value ? $account->{'field_ged'}->value : 0,
      'user_picture' => $currentUserAvatar,
      'user_name' => $account->{'name'}->value,
      'is_avatar' => $isAvatar,
      'uid' => $account->id()
    ];
    $variables['#cache']['contexts'][] = 'session';
  }

  $user = \Drupal::routeMatch()->getParameter('user');
  if ($user instanceof \Drupal\user\Entity\User) {
    $uid = $user->id();
    //check if profile picture exists. if not, get default avatar
    $profilePicture = get_user_avatar($user);
    //check if cover photo exists. if not, get default image
    $coverPhotoAvatar = get_default_cover_photo($user);

    $referralsImage = [];
    $service = \Drupal::service('girchi_referral.get_user_referrals');
    $referralsArray = $service->getUserReferrals($uid);
    $referralCount = (int) $referralsArray['referralCount'];
    $userRefferals = $referralsArray['referralUsers'];
    //For modal usage , TODO create one array with all user info.
    $userInfo = [];
    foreach ($userRefferals as $userRefferal) {
      $referralId = $userRefferal->id();
      $referralUser = User::load($referralId);
      //check if referral user has profile picture
      if ($referralUser->get('user_picture')->entity) {
        $profilePictureEntity = $referralUser->get('user_picture')->entity;
        $referralProfilePicture = $profilePictureEntity->getFileUri();
        $referralsImage[] = $referralProfilePicture;
      } else {
        $referralProfilePicture = null;
        $referralsImage[] = $referralProfilePicture;
      }

      $userInfo[] = [
        'first_name' => $referralUser->get('field_first_name')->value,
        'last_name' => $referralUser->get('field_last_name')->value,
        'image' => $referralProfilePicture,
        'uid' => $referralUser->get('uid')->value,
      ];
    }

    $thumbnail_url = "";
    if (!empty($user->get('field_profile_video')->get(0)->value)) {
      $youtube_video_url = $user->get('field_profile_video')->get(0)->value;
      parse_str(parse_url($youtube_video_url, PHP_URL_QUERY), $url_parsed_array);

      if (!empty($url_parsed_array['v'])) {
        $video_id_array = explode("?v=", $user->get('field_profile_video')->get(0)->value);
        $video_id = $video_id_array[1];
        $thumbnail_url = sprintf("https://img.youtube.com/vi/%s/maxresdefault.jpg", $video_id);
      }
    }


    // Pass user's favorite news IDs as contextual parameter to Favorite News views block.
    $favoriteNews = $user->get('field_favorite_news')->getValue();
    $favoriteNewsIds = [];
    foreach ($favoriteNews as $news) {
      if (isset($news['target_id'])) {
        $favoriteNewsIds[] = $news['target_id'];
      }
    }
    $favoriteNewsIds = implode('+', $favoriteNewsIds);



//    $ged_formatted = $GEDHelper::getFormattedGed($user->get('field_political_ged')->value);

    $variables['user'] = [
      'id' => $user->id(),
      'field_cover_photo' => $coverPhotoAvatar,
      'user_picture' => $profilePicture,
      'first_name' => $user->get('field_first_name')->value,
      'last_name' => $user->get('field_last_name')->value,
//      'ged' =>  $GEDHelper::getFormattedGed($user->get('field_ged')->value),
      'ged' =>  $user->get('field_ged')->value,
      'referrals_profile_picture' => array_slice($referralsImage,0,5),
      'referralCount' => $referralCount,
      'rating_in_party_list' => $user->get('field_rating_in_party_list')->value,
      'political_ged' => $user->get('field_political_ged')->value,
      'user_rank' => $user->get('field_rank')->value,
      'field_intro' => $user->get('field_intro')->value,
      'field_bio' => $user->get('field_bio')->value,
      'field_profile_video' => $user->get('field_profile_video')->get(0) ? ($user->get('field_profile_video')->get(0)->view()) : null,
      'field_facebook_url' => $user->get('field_facebook_url')->value,
      'field_twitter_url' => $user->get('field_twitter_url')->value,
      'field_public_email' => $user->get('field_public_email')->value ?: '',
      'favoriteNewsIds' => $favoriteNewsIds,
      'field_author' => $user->id(),
      'user_info' => $userInfo,
      'thumbnail_url' => $thumbnail_url,
      'is_politician' => $user->get('field_politician')->value,
      'referral_benefits' => $user->get('field_referral_benefits')->value,
    ];
  }

  $node = \Drupal::request()->attributes->get('node');
  if (isset($node) && $node->getType() == 'promo_page') {
    $webform                           = \Drupal::entityTypeManager()->getStorage('webform')->load('student_registration');
    $view_builder                      = \Drupal::service('entity_type.manager')->getViewBuilder('webform');
    $build                             = $view_builder->view($webform);
    $variables['student_registration'] = $build;
    $webform                           = \Drupal::entityTypeManager()->getStorage('webform')->load('teacher_registration');
    $view_builder                      = \Drupal::service('entity_type.manager')->getViewBuilder('webform');
    $build                             = $view_builder->view($webform);
    $variables['teacher_registration'] = $build;
    $webform                           = \Drupal::entityTypeManager()->getStorage('webform')->load('investor_registration');
    $view_builder                      = \Drupal::service('entity_type.manager')->getViewBuilder('webform');
    $build                             = $view_builder->view($webform);
    $variables['investor_registration'] = $build;
  }
}

/**
 * Implements hook_preprocess_user() for page.html.twig.
 */
function girchi_preprocess_user(array &$variables)
{ }

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function girchi_preprocess_block(array &$variables)
{ }

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function girchi_theme_suggestions_fieldset_alter(array &$suggestions, array $variables)
{
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
  $suggestions[] = 'fieldset__form_composite';
  }*/ }

/**
 * Implements hook_preprocess_node().
 */
function girchi_preprocess_node(array &$variables)
{
  // Default to turning off byline/submitted.
  // $variables['display_submitted'] = FALSE;.
  if ($variables['node']->getType() == 'article') {
    $terms = [];
    $taxonomy_terms = $variables['node']->get('field_category')->referencedEntities();
    foreach ($taxonomy_terms as $term) {
      $terms[$term->getName()] = $term->id();
    }
    $variables['terms'] = $terms;

    $nid = $variables['node']->id();
    $user = User::load(\Drupal::currentUser()->id());
    $authenticatedUser = $variables['logged_in'] = $user->isAuthenticated();
    $favNewsEx = $user->get('field_favorite_news')->getValue();
    $checkboxValue = false;
    if ($authenticatedUser && $favNewsEx) {
      $arr = array_filter($favNewsEx, function ($var) use ($nid) {
        return $var['target_id'] == $nid;
      });

      if (!empty($arr)) {
        $checkboxValue = true;
      }
    }

    $variables['checkboxValue'] = $checkboxValue;
  }
  if ($variables['node']->getType() == 'page') {
    $current_url = Url::fromRoute('<current>');
    $path = $current_url->toString();
    $show_sidebar = FALSE;
    $splited_path = explode('/', $path);
    if (in_array('about', $splited_path)) {
      $show_sidebar = TRUE;
    }
    $variables['show_sidebar'] = $show_sidebar;
  }

  if ($variables['node']->getType() == 'article' && $variables['view_mode'] == 'full') {
    $views_count = \Drupal::service('statistics.storage.node')->fetchView($variables['node']->id());
    $total_view_count = $views_count ? $views_count->getTotalCount() : 0;
    $variables['total_view_count'] = $total_view_count;
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function girchi_preprocess_views_view(&$variables)
{
  if ($variables['id'] == 'news') {
    if (empty($variables['exposed']['category']['#value']) == FALSE) {

      $termID = $variables['exposed']['category']['#value'];
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($termID);
      $variables['categoryName'] = $term->name->value;
    }

    $user = \Drupal::routeMatch()->getParameter('user');
    if ($user instanceof User) {
      $uid = $user->id();
      $variables['newsAuthor'] = $uid;
    }
  }

  if ($variables['id'] == 'favorite_news') {
    $user = \Drupal::routeMatch()->getParameter('user');
    if ($user instanceof User) {
      $variables['favorite_news'] = [
          'first_name' => $user->get('field_first_name')->value,
          'last_name' => $user->get('field_last_name')->value,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_form().
 */
function girchi_preprocess_form(array &$variables)
{
  $config = \Drupal::config('om_site_settings.site_settings');
  $variables['enable_user_ui'] = $config->get('enable_user_ui');

  $current_user_id = \Drupal::currentUser()->id();
  /** @var User $user */
  $user = User::load($current_user_id);

  if ($variables['attributes']['id'] == 'user-form') {
    if ($user->get('field_social_auth_password')->getValue()) {
      $social_auth_check = $user->get('field_social_auth_password')->getValue()[0]['value'];
    } else {
      $social_auth_check = FALSE;
    }
    $social_auth = \Drupal::service('social_auth.data_handler');
    $social_auth_token_check = $social_auth->get('social_auth_facebook_access_token');
    if (!$social_auth_check && $social_auth_token_check) {
      $response = new RedirectResponse("/createpassword");
      $response->send();
    }

    if($user->get('field_cover_photo')->entity){
      $coverName = $user->get('field_cover_photo')->entity->getFileName();
      $variables['cover_name'] = $coverName;
    }
  }

}

/**
 * Implements hook_preprocess_select().
 */
function girchi_preprocess_select(array &$variables)
{
  // $variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function girchi_preprocess_field(array &$variables, $hook)
{
  /*switch ($variables['element']['#field_name']) {
  }*/ }

/**
 * Implements hook_preprocess_details().
 */
function girchi_preprocess_details(array &$variables)
{
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/ }

/**
 * Implements hook_preprocess_menu_local_task().
 */
function girchi_preprocess_menu_local_task(array &$variables)
{
  // $variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

/**
 *
 */
function girchi_preprocess_taxonomy_term(&$variables)
{
  $term_id = $variables['elements']['#taxonomy_term']->id();
  $variables['term_id'] = $term_id;
}

/**
 *
 */
function girchi_preprocess_paragraph(&$variables)
{
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  if ($paragraph->getParagraphType()->id() == 'basic_text') {
    $label = $paragraph->getParentEntity()->label();
    $created_date = $paragraph->getParentEntity()->getCreatedTime();
    $img_uri = $paragraph->field_image && $paragraph->field_image->first() ? $paragraph->field_image->first()->entity->getFileUri() : '';
    $img_url = file_create_url($img_uri);
    $variables['data'] = [
      'label' => $label,
      'created_date' => $created_date,
      'img_uri' => $img_uri,
    ];
  }

  /**
   * For 'team member' paragraph
   */

  if ($paragraph->getParagraphType()->id() == 'team_member') {
    $img_uri = $paragraph->field_image && $paragraph->field_image->first() ? $paragraph->field_image->first()->entity->getFileUri() : '';
    $full_name = $paragraph->field_name->first()->value;
    $full_name = explode(' ', $full_name);
    $first_name = $full_name[0];
    $last_name = $full_name[1];
    $facebook_link = $paragraph->field_facebook_link->first()->value;
    $twitter_link = $paragraph->field_twitter_link->first()->value;
    $email = $paragraph->field_email->first()->value;
    $variables['data'] = [
      'img_uri' => $img_uri,
      'first_name' => $first_name,
      'last_name' => $last_name,
      'facebook_link' => $facebook_link,
      'twitter' => $twitter_link,
      'email' => $email,
    ];
  }

  /**
   * For 'board' paragraph
   */

  if ($paragraph->getParagraphType()->id() == 'board') {
    $label = $paragraph->getParentEntity()->label();
    foreach ($paragraph->field_paragraphs as $inner_paragraph) {
      $paragraph_id = $inner_paragraph->entity->getParagraphType()->id();
      $variables['data'][$paragraph_id][] = $inner_paragraph->view();
    }
    $variables['data']['label'] = $label;
  }

  /**
   * For 'board member' paragraph
   */
  if ($paragraph->getParagraphType()->id() == 'board_member_partner' || $paragraph->getParagraphType()->id() == 'board_member_politician') {
    $img_uri = $paragraph->field_image && $paragraph->field_image->first() ? $paragraph->field_image->first()->entity->getFileUri() : '';
    $full_name = $paragraph->field_name->first()->value;
    $full_name = explode(' ', $full_name);
    $first_name = $full_name[0];
    $last_name = $full_name[1];
    $variables['data'] = [
      'img_uri' => $img_uri,
      'first_name' => $first_name,
      'last_name' => $last_name,
    ];
  }

  if ($paragraph->getParagraphType()->id() == 'school_goal') {
    $thumbnail_url = "";
    if(!empty($paragraph->field_video->first())){
      $youtube_video_url = $paragraph->field_video->first()->value;
      parse_str(parse_url($youtube_video_url, PHP_URL_QUERY), $url_parsed_array);

      if (!empty($url_parsed_array['v'])) {
        $video_id_array = explode("?v=",$paragraph->field_video->first()->value);
        $video_id = $video_id_array[1];
        $thumbnail_url = sprintf("https://img.youtube.com/vi/%s/maxresdefault.jpg", $video_id);
      }
    }

    $img_uri = $paragraph->field_image && $paragraph->field_image->first() ? $paragraph->field_image->first()->entity->getFileUri() : '';
    $video = $paragraph->field_video->first() !=  null  ? $paragraph->field_video->first()->view() : null;
    $variables['data'] = [
      "img_uri" => $img_uri,
      "video_thumbnail" => $thumbnail_url,
      "video" => $video
    ];
  }

  if ($paragraph->getParagraphType()->id() == 'image_icon_item' && $paragraph->getParentEntity()->getType() == 'icon_items_grid') {
    $icon_styles = ['grey' => 'bg-light-silver', 'orange' => 'bg-yellow'];
    $img_uri = $paragraph->field_image && $paragraph->field_image->first() ? $paragraph->field_image->first()->entity->getFileUri() : '';
    $icon_style = $paragraph->getParentEntity()->field_style->value;

    $variables['data'] = [
      "img_uri" => $img_uri,
      "icon_class" => $icon_styles[$icon_style],
    ];
  }
}

/**
 *
 */
function girchi_preprocess_menu(array &$variables)
{
  if (isset($variables['menu_name']) && $variables['menu_name'] == 'about-us') {
    $current_url = Url::fromRoute('<current>');
    $path = $current_url->toString();
    $variables['current_path'] = $path;
  }
}

function girchi_preprocess_views_view_fields(&$variables)
{
  $view = $variables['view'];

  if ($view->id() == 'party_list') {
    $politician_ids = [];
    foreach ($view->result as $user) {
      $politician_ids[] = $user->_entity->id();
    }
    if (!empty($politician_ids)) {
      $party_list_calculator = Drupal::service('girchi_my_party_list.party_list_calculator');
      $supporters = $party_list_calculator->getPoliticiansSupporters($politician_ids);
      $variables['supporters'] = $supporters;
    }
  }
}

function get_user_avatar($user)
{
  if ($user->get('user_picture')->entity) {
    $profilePictureEntity = $user->get('user_picture')->entity;
    $profilePicture = $profilePictureEntity->getFileUri();
  } else {
    $profilePicture = null;
  }

  return $profilePicture;
}

function get_default_cover_photo($user)
{
  if ($user->get('field_cover_photo')->entity) {
    $coverPhotoEntity = $user->get('field_cover_photo')->entity;
    $coverPhotoAvatar = $coverPhotoEntity->getFileUri();
  } else {
    $coverPhotoAvatar = null;
  }

  return $coverPhotoAvatar;
}
