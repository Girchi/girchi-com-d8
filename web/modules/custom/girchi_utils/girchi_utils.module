<?php

/**
 * @file
 * Contains girchi_utils.module.
 */

use Drupal\Core\TypedData\Exception\MissingDataException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\user\Entity\User;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_token_info().
 */
function girchi_utils_token_info()
{
  $type = [
    'name' => t('Girchi Token'),
    'description' => t('Tokens for Girchi.'),
  ];

  $tokens['page-type'] = [
    'name' => t("Page type"),
    'description' => t('To determine page type, basic page or about page'),
  ];
  $tokens['base-url'] = [
    'name' => t("Base url without language code."),
    'description' => t("Returns base url without language code."),
  ];

  return [
    'types' => ['customtoken' => $type],
    'tokens' => ['customtoken' => $tokens],
  ];
}

/**
 * Implements hook_tokens().
 */
function girchi_utils_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata)
{
  $replacements = [];

  if ($type == 'customtoken') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'page-type':
          if (!empty($data['node'])) {
            if ($data['node']->getType() == 'page' && $data['node']->field_is_about->value == 1) {
              $replacements[$original] = '/about';
            } else {
              $replacements[$original] = '/page';
            }
          }
          break;
        case 'base-url':
          $base_url = \Drupal::request()->getSchemeAndHttpHost();
          $replacements[$original] = $base_url;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_help().
 */
function girchi_utils_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the girchi_utils module.
    case 'help.page.girchi_utils':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contains custom extensions and overrides for Girchi project.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_form_display_alter().
 */
function girchi_utils_entity_form_display_alter(&$form_display, $context)
{

  if ($context['entity_type'] == 'user' && $context['form_mode'] == 'register') {

    /** @var \Drupal\Core\Session\AccountProxy $user */
    $user = \Drupal::currentUser();

    if ($user->hasPermission('access supporters registration')) {
      $storage = \Drupal::service('entity_type.manager')
        ->getStorage('entity_form_display');

      $form_display = $storage->loadUnchanged('user.user.supporters_registration');
    }
  }
}

/**
 * Implements hook_theme().
 */
function girchi_utils_theme($existing, $type, $theme, $path)
{
  $templates = [
    'supporter_registration' => [
      'variables' =>
        [
          'form' => NULL,
        ],
      'template' => 'supporter-registration',
      'render element' => 'form',
    ],
    'top_topics' => [
      'variables' =>
        [
          'slider_topics' => NULL,
          'bottom_topics' => NULL,
        ],
      'template' => 'top-topics',
    ],
    'categories_block' => [
      'variables' =>
        [
          'categories' => NULL,
          'current_category' => NULL,
        ],
      'template' => 'categories-block',
    ],
    'categories_block_mobile' => [
      'variables' =>
        [
          'categories' => NULL,
          'current_category' => NULL,
        ],
      'template' => 'categories-block-mobile',
    ],
    'top_videos' => [
      'variables' =>
        [
          'top_videos' => NULL,
        ],
      'template' => 'top-videos',
    ],
    'tags_block' => [
      'variables' =>
        [
          'tags' => NULL,
        ],
      'template' => 'tags-block',
    ],
    'politician_block' => [
      'variables' =>
        [
          'language' => NULL,
          'is_politician' => NULL,
        ],
      'template' => 'politician-block',
    ],
    'user_profile' => [
      'variables' =>
        [
          'user_id' => NULL,
          'user_first_name' => NULL,
          'user_last_name' => NULL,
          'user_ged' => NULL,
          'user_profile_picture' => NULL,
          'ged' => NULL,
          'member' => NULL,
          'user_count' => NULL,
          'user_rank' => NULL,
          'is_avatar' => NULL,
        ],
      'template' => 'user_profile',
    ],
    'front_page_articles' => [
      'variables' =>
        [
          'articles' => NULL,
          'category' => NULL,
        ],
      'template' => 'front-page-articles',
    ],
    'my_party_list_block' => [
      'variables' =>
        [
          'members' => NULL,
          'members_short' => NULL,
          'is_user_public' => NULL
        ],
      'template' => 'my-party-list-block',
    ],
    'page_election_2020' => [
      'variables' => [
        'politicians' => NULL,
        'logged_in' => NULL,
        'user_header' => NULL,
        'total_amount' => NULL,
        'milestones' => NULL,
      ],
      'template' => 'page-election-2020',
      'render element' => 'children',
    ]

  ];

  return $templates;
}

/**
 * Implements hook_form_alter().
 */
function girchi_utils_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $currentUser = Drupal::currentUser()->getRoles();
  // Getting Politician text from omedia_settings.
  $config = \Drupal::config('om_site_settings.site_settings');

  if ($form_id == "user_register_form") {

    if (reset($currentUser) == "anonymous") {

      unset($form['account']['mail']['#title']);
      unset($form['account']['mail']['#description']);

      $form['account']['mail']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['account']['mail']['#attributes']['id'][] = 'email';
      $form['account']['mail']['#attributes']['placeholder'][] = t('Enter Email');

      unset($form['field_referral']['widget'][0]['target_id']['#title']);
      unset($form['field_referral']['widget'][0]['target_id']['#description']);
      unset($form['field_referral']['widget']['#title']);
      unset($form['field_referral']['widget']['#description']);

      $form['field_referral']['widget'][0]['target_id']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_referral']['widget'][0]['target_id']['#attributes']['id'][] = 'referral';
      $form['field_referral']['widget'][0]['target_id']['#attributes']['placeholder'][] = 'მიუთითეთ Referral-ი';

      $form['actions']['submit']['#attributes']['class'][] = 'btn btn-lg btn-block btn-warning text-uppercase mt-4 fix';
      $form['#after_build'][] = 'girchi_utils_after_build';

      // Add terms and conditions checkbox.
      $form['account']['terms_and_conditions'] = [
        '#type' => 'checkbox',
        '#required' => TRUE,
        '#default_value' => FALSE,
      ];

      $form['account']['terms_and_conditions']['#attributes']['class'][] = 'form-control';

      // Add terms and conditions validation.
      $form['#validate'][] = 'terms_and_conditions_validate';
    }

    if (
      $form_state->getFormObject()->getFormDisplay($form_state)->getMode()
      === 'supporters_registration'
    ) {
      $form['field_referral']['widget']['#access'] = FALSE;

      $form['field_referral']['widget'][0]['target_id']['#default_value'] = User::load(Drupal::currentUser()->id());
      $form['#after_build'][] = 'girchi_utils_after_build';
    }
  }

  if ($form_id == "user_login_form") {
    unset($form['name']['#title']);
    unset($form['name']['#description']);
    unset($form['pass']['#title']);
    unset($form['pass']['#description']);

    $form['name']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['name']['#attributes']['id'][] = 'email';
    $form['name']['#attributes']['placeholder'][] = t('Enter Email');

    $form['pass']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['pass']['#attributes']['id'][] = 'password';
    $form['pass']['#attributes']['placeholder'][] = t('Enter password');

    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-lg btn-block btn-success text-uppercase mt-4 fix';
  }

  if ($form_id == "user_form") {
    unset($form['field_referral']['widget'][0]['target_id']['#title']);
    unset($form['field_referral']['widget'][0]['target_id']['#description']);
    unset($form['field_referral']['widget']['#title']);
    unset($form['field_referral']['widget']['#description']);

    unset($form['field_region']['widget'][0]['target_id']['#title']);
    unset($form['field_region']['widget'][0]['target_id']['#description']);

    $form['field_referral']['widget'][0]['target_id']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['field_referral']['widget'][0]['target_id']['#attributes']['id'][] = 'referral';
    $form['field_referral']['widget'][0]['target_id']['#attributes']['placeholder'][] = 'მიუთითეთ Referral-ი';

    $form['field_region']['widget'][0]['target_id']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['field_region']['widget'][0]['target_id']['#attributes']['id'][] = 'region';
    $form['field_region']['widget'][0]['target_id']['#attributes']['placeholder'][] = t('Choose region');

    if (!Drupal::currentUser()->hasPermission('admin')) {
      $form['field_ged']['widget'][0]['value']['#attributes']['disabled'] = 'disabled';
      // Unset titles.
      unset($form['account']['mail']['#title']);
      unset($form['field_first_name']['widget']['0']['value']['#title']);
      unset($form['field_last_name']['widget']['0']['value']['#title']);
      unset($form['field_date_of_birth']['widget']['0']['value']['#title']);
      unset($form['field_tel']['widget']['0']['value']['#title']);
      unset($form['field_personal_id']['widget']['0']['value']['#title']);
      unset($form['field_address']['widget']['0']['value']['#title']);
      unset($form['field_politician']['widget']['value']['#title']);
      unset($form['field_publicity']['widget']['value']['#title']);
      unset($form['account']['current_pass']['#title']);

      // Unset descriptions.
      unset($form['account']['mail']['#description']);
      unset($form['account']['current_pass']['#description']);

      // Set classes for inputs.
      $form['account']['mail']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['account']['current_pass']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['account']['mail']['#attributes']['id'][] = 'email';
      $form['account']['mail']['#attributes']['placeholder'][] = t('Enter Email');
      $form['field_personal_id']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_first_name']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_last_name']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_tel']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix int-phone';
      $form['field_address']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_politician']['#attributes']['class'][] = 'form-control';
      $form['field_politician']['widget']['value']['#attributes']['class'][] = 'form-control';
      $form['field_publicity']['#attributes']['class'][] = 'form-control';
      $form['field_publicity']['widget']['value']['#attributes']['class'][] = 'form-control';
      $form['actions']['submit']['#attributes']['class'][] = 'btn btn-lg btn-block btn-success text-uppercase mt-4';

      $form['field_politician']['#theme_wrappers'] = [];
      $form['field_publicity']['#theme_wrappers'] = [];

      // Get politician text from settings.
      $form['politician_text'] = [
        '#type' => 'html',
        '#markup' => $config->get('politician_checkbox_text')['value'],
        '#theme' => '',
      ];

      // Public profile.
      unset($form['field_intro']['widget'][0]['#title']);
      unset($form['field_bio']['widget'][0]['#title']);
      unset($form['field_profile_video']['widget']['#title']);
      unset($form['field_profile_video']['widget'][0]['value']['#title']);
      unset($form['field_twitter_url']['widget']['0']['value']['#title']);
      unset($form['field_facebook_url']['widget']['0']['value']['#title']);
      unset($form['field_instagram_url']['widget']['0']['value']['#title']);
      unset($form['field_public_email']['widget']['0']['value']['#title']);

      $form['field_profile_video']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_twitter_url']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_facebook_url']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_instagram_url']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';
      $form['field_public_email']['widget'][0]['value']['#attributes']['class'][] = 'form-control form-control-lg fix';

      $form['actions']['submit']['#submit'][] = 'girchi_utils_user_form_submit';
      $form['#validate'][] = 'user_form_validate';
      $form['#after_build'][] = 'girchi_utils_after_build';
    }

    // Validate phone filed if it's not empty.
    $value = $form_state->getUserInput();
    if (!empty($value['field_tel'][0]['full_phone'])) {
      $form['#validate'][] = 'telephone_validation';
    }

  }
}

/**
 * Custom submit handler .
 */
function girchi_utils_after_build($form, &$form_state)
{
  if (
    $form_state->getFormObject()->getFormDisplay($form_state)->getMode()
    === 'supporters_registration'
  ) {

    $form['field_date_of_birth']['widget'][0]['value']['date']['#attributes']['class'][] = 'form-control form-control-lg fix';
  }

  unset($form['account']['pass']['pass1']['#title']);
  unset($form['account']['pass']['#attached']['drupalSettings']['password']['showStrengthIndicator']);

  $form['account']['pass']['pass1']['#attributes']['class'][] = 'form-control form-control-lg fix';
  $form['account']['pass']['pass1']['#attributes']['id'][] = 'password';
  $form['account']['pass']['pass1']['#attributes']['placeholder'][] = t('Enter password');

  unset($form['account']['pass']['pass2']['#title']);
  $form['account']['pass']['pass2']['#attributes']['class'][] = 'form-control form-control-lg fix';
  $form['account']['pass']['pass2']['#attributes']['id'][] = 'password2';
  $form['account']['pass']['pass2']['#attributes']['placeholder'][] = t('Enter password');

  unset($form['account']['terms_and_conditions']['#theme_wrappers']);

  return $form;
}

/**
 * Validate terms and conditions checkbox.
 */
function terms_and_conditions_validate($form, &$form_state)
{
  if ($form['account']['terms_and_conditions']['#value'] !== 1) {
    \Drupal::messenger()->addWarning(t('You must agree to the terms and conditions before register'));
  }
}

/**
 *
 */
function user_form_validate($form, FormStateInterface &$form_state)
{
  $referral_id = $form_state->getValue('field_referral')[0]['target_id'];
  $uid = \Drupal::currentUser()->id();
  if ($referral_id) {
    if ($referral_id == $uid) {
      $form_state->setErrorByName('title', t("You can't be your own referral"));

    } else {
      $referral_user = \Drupal::entityTypeManager()->getStorage('user')->load($referral_id);
      if ($referral_user) {
        if ($referral_user->get('field_referral')->target_id == $uid) {
          $form_state->setErrorByName('title', t("You can't be your referral's referral."));
          $form_state->unsetValue('field_referral');
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function girchi_utils_preprocess_block(&$variables)
{
  $variables['base_path'] = base_path();
}

/**
 * Impelements hook_user_form_submit().
 * @throws EntityStorageException
 */
function girchi_utils_user_form_submit(&$form, FormStateInterface $form_state)
{
  // Save full phone into users field.
  if ($form['#form_id'] == 'user_form') {
    $value = $form_state->getUserInput();
    $uid = \Drupal::currentUser()->id();
    /** @var \Drupal\user\Entity\User $user */
    $user = User::load($uid);

    /** @var \Drupal\Core\Logger\LoggerChannel $logger_factory */
    $logger_factory = \Drupal::service('logger.factory')->get('girchi_utils');
    if (isset($value['field_tel'][0]['full_phone'])) {
      try {
        $full_phone = $value['field_tel'][0]['full_phone'];
        $user->set('field_tel', $full_phone);
        $user->save();
      }
      catch (EntityStorageException $e) {
        $logger_factory->error($e->getMessage());
      }
    }

    try {
      // Set region to user field field_region.
      if(isset($value['region'])){
        $region_id = $value['region'];
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($region_id);
        if($term){
          $user->set('field_region', $region_id);
          $user->save();
        }
      }

      // Badge visibility logic.
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $user_badges */
      $user_badges = $user->get('field_badges');
      foreach ($value['badges'] as $key => $badge) {
        $decoded_value = Json::decode($badge);
        if ($decoded_value['selected'] == TRUE) {
          $decoded_value['selected'] = FALSE;
          $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($key);
          $term_status = $term->get('field_publicity')->value;

          if ($decoded_value['visibility'] == TRUE && $term_status == TRUE && $decoded_value['earned_badge'] == TRUE) {
            $decoded_value['status_message'] = '';
          }
          elseif ($decoded_value['visibility'] == FALSE && $term_status == TRUE && $decoded_value['earned_badge'] == TRUE) {
            $decoded_value['status_message'] = 'ბეჯი დამალულია საჯაროდ';
          }
          elseif ($decoded_value['earned_badge'] == FALSE && $term_status == TRUE) {
            \Drupal::messenger()->addWarning(t("You have not earned this badge yet"));
          }

          if (!empty($user_badges)) {
            $user_badges_new = clone $user_badges;
            /** @var \Drupal\Core\Field\FieldItemList $badge_exists */
            $badge_exists = $user_badges_new->filter(static function ($user_badges) use ($key) {
              return $key == $user_badges->target_id;
            });
            if ($badge_exists->isEmpty()) {
              $user_badges->appendItem([
                'target_id' => $key,
                'value' => Json::encode($decoded_value),
              ]);
              $user->save();
            }
            else {
              foreach ($user_badges as $user_badge){
                if($user_badge->target_id == $key){
                  $user_badge->set('value', Json::encode($decoded_value));
                  $user->save();
                }

              }
            }
          }
        }
      }

    }
    catch (InvalidPluginDefinitionException $e) {
      $logger_factory->error($e->getMessage());
    }
    catch (PluginNotFoundException $e) {
      $logger_factory->error($e->getMessage());
    }
    catch (MissingDataException $e) {
      $logger_factory->error($e->getMessage());
    }

  }

  if ($_FILES['avatar']['size'] != 0) {
    $image_original_path = $_FILES['avatar']['tmp_name'];
    $mime_type = explode('/', mime_content_type($image_original_path));
    // Check mime type if it's image.
    if ($mime_type[0] == 'image') {
      $ext = pathinfo($_FILES['avatar']['name'], PATHINFO_EXTENSION);
      $image_object = file_get_contents($image_original_path);

      // Saving image in public://.
      $file = file_save_data($image_object, file_default_scheme() . '://' . basename($image_original_path) . '.' . $ext);

      // Loading current user and setting avatar.
      $uid = \Drupal::currentUser()->id();
      $user = User::load($uid);
      $user->set('user_picture', $file->id());
      $user->save();
    } else {
      \Drupal::messenger()->addMessage(t('Please upload image file.'));
    }
  }
}

/**
 * Implements hook_cron().
 */
function girchi_utils_cron()
{
  $logger_factory = Drupal::service('logger.factory')->get('girchi_utils');
  /**
   * @var \Drupal\girchi_utils\GedRaitingService $rankRaiting
   */
  $rankRaiting = Drupal::service('girchi_utils.ged_raiting');
  $rankRaiting->calculateRankRating();

  try {
    $donation_storage = \Drupal::entityTypeManager()->getStorage('donation');
    $donation_entity_ids = $donation_storage->getQuery()
      ->condition('status', 'OK')
      ->condition('user_id', '0', '!=')
      ->condition('created', strtotime('13-07-2020'), '>=')
      ->execute();
    $donations = $donation_storage->loadMultiple($donation_entity_ids);
    $total_value = 0;
    foreach ($donations as $donation) {
      $total_value += $donation->amount->value;
    }
    $key_value = Drupal::service('keyvalue')->get('girchi_utils');
    $key_value->set('total_amount',$total_value );
  } catch (Exception $exception) {
    $logger_factory->error($exception->getMessage());
  }


}

/**
 * Implements hook_simple_sitemap_links_alter().
 */
function girchi_utils_simple_sitemap_links_alter(array &$links, $sitemap_variant)
{
  $term_url_mapping = [
    'news_categories' => 'news?category=',
    'tags' => 'news?tag=',
  ];

  foreach ($links as $key => $link) {
    if (
      isset($link['meta']['entity_info']['entity_type'])
      && $link['meta']['entity_info']['entity_type'] === 'taxonomy_term'
    ) {
      $tid = $link['meta']['entity_info']['id'];

      // Get taxonomy term bundle.
      $term = Term::load($tid);
      $term_bundle = $term->bundle();

      $old_path = $link['meta']['path'];
      $new_path = $term_url_mapping[$term_bundle] . $tid;

      $links[$key]['meta']['path'] = $new_path;
      $links[$key]['url'] = str_replace($old_path, $new_path, $links[$key]['url']);

      foreach ($link['alternate_urls'] as $k => $alt_url) {
        $links[$key]['alternate_urls'][$k] = str_replace($old_path, $new_path, $alt_url);
      }
    }
  }
}

/**
 * Implements hook_Webform_submission_presave().
 */
function girchi_utils_webform_submission_presave(WebformSubmissionInterface $webform_submission)
{
  /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
  $request_stack = \Drupal::service('request_stack');
  $request = $request_stack->getCurrentRequest();

  $webform_data = $webform_submission->getData();

  if ($webform_submission->getWebform()->id() == 'student_registration') {
    $start_times = $request->request->get('start-time');
    $end_times = $request->request->get('end-time');
    if (!empty($start_times) && !empty($end_times)) {
      foreach ($start_times as $key => $start_time) {
        $webform_data['time_ranges'][] = $start_time . '-' . $end_times[$key];
      }
    }
  }

  $webform_submission->setData($webform_data);
}

/**
 * Implements hook_webform_element_alter().
 */
function girchi_utils_webform_element_alter(array &$element, FormStateInterface $form_state, array $context)
{
  if (isset($element['#webform']) && $element['#webform'] == 'investor_registration') {
    $element['#element_validate'][] = [
      'Drupal\girchi_utils\Validate\ValidationConstraint',
      'validate',
    ];
  }
}

/**
 * Validate phone field.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function telephone_validation(array $form, FormStateInterface $form_state)
{
  $value = $form_state->getUserInput();
  $full_phone = $value['field_tel'][0]['full_phone'];

  // Get validation service.
  $phone_validator = \Drupal::service('telephone_validation.validator');
  $is_valid = $phone_validator->isValid($full_phone, 1);
  if (!$is_valid) {
    $form_state->setErrorByName('field_tel', t('Invalid phone number.'));
  }

}

/**
 * User form presave.
 */
function girchi_utils_user_presave(User $account)
{
  // TODO:: Uncomment if statement.
  //  if ($account->original != NULL) {
  //    $original_referral = $account->original->get('field_referral')->target_id;
  //    $updated_value = $account->get('field_referral')->target_id;
  //    if ($original_referral != $updated_value) {
  //      $referral_date = $account->get('field_referral_date')->value;
  //      $referral_date_unix = strtotime($account->get('field_referral_date')->value);
  //      $one_year = strtotime('+1 year', $referral_date_unix);
  //      $today = strtotime(date('Y-m-d'));
  //
  //      if ($today > $one_year) {
  //        $account->set('field_referral_date', date('Y-m-d'));
  //      }
  //      else {
  //        $response = new RedirectResponse(\Drupal::request()->getRequestUri());
  //        $response->send();
  //        \Drupal::messenger()->addError(t("You can't change your referral within one year from") . ' ' . $referral_date);
  //        exit;
  //      }
  //
  //    }
  //  }.
}

function girchi_utils_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if(\Drupal::currentUser()->id() == 0 && $route_name == "entity.user.canonical") {
    /** @var User $user */
    $user = \Drupal::routeMatch()->getParameter('user');
    if($user instanceof User) {
      $cache_tag = $user->getCacheTags();
      $variables['#cache']['tags'][] = $cache_tag[0];
    }
  }
}
