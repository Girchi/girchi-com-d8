<?php

/**
 * @file
 * Contains girchi_my_party_list.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function girchi_my_party_list_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the girchi_my_party_list module.
    case 'help.page.girchi_my_party_list':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for my party list form') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function girchi_my_party_list_theme()
{
  return [
    'girchi_my_party_list' => [
      'render element' => 'children',
      'variables' => [
        'my_party_list' => NULL,
        'max_percentage' => NULL,
        'top_politicians' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function girchi_my_party_list_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if ($form_id == 'views_exposed_form') {
    $form['combine']['#attributes']['class'][] = 'border-0 py-1 m-1 px-3 outline-none font-size-3 text-success w-100';
    $form['combine']['#attributes']['placeholder'] = 'ძებნა...';
    $form['#attributes']['class'][] = 'w-100 max-w-md-200 pt-3  mt-2 mt-md-0 pt-md-0 navbar-search ml-auto text-right';
  }

}


/**
 * Implements hook_cron().
 */
function girchi_my_party_list_cron()
{
  /**
   * @var \Drupal\girchi_my_party_list\PartyListCalculatorService $party_list_calculator
   */
  $party_list_calculator = Drupal::service('girchi_my_party_list.party_list_calculator');
  $party_list_calculator->calculate();
}

function getPoliticiansSupporeters($politician_ids)
{
  $connection = \Drupal::database();
  $returnArray = [];
  $users_data = [];
  if (!empty($politician_ids)) {
    foreach ($politician_ids as $id) {

      $query = $connection->select('user__field_my_party_list', 'user_party_list');
      $query->condition('user_party_list.field_my_party_list_target_id', $id, '=')
        ->fields('user_party_list', ['entity_id', 'field_my_party_list_value']);

      $countQuery = $query->countQuery();
      $supportersCount = $countQuery->execute()
        ->fetch();
      $returnArray[$id]['count'] = $supportersCount->expression;
      $result = $query->execute()
        ->fetchAll();
      foreach ($result as $item) {
        $users_data[$item->entity_id] = $item->field_my_party_list_value;
      }
      $users_info = getSupportersInfo($users_data);
      $returnArray[$id]['users_info'] = $users_info;
    }
  }

  return $returnArray;
}

function getPoliticianSupporeters($politician_id)
{
  return getPoliticiansSupporeters([$politician_id]);
}


function getSupportersInfo($users_data)
{
  $result = [];
  $users = User::loadMultiple(array_keys($users_data));
  $base_url = \Drupal::request()->getSchemeAndHttpHost();
  $theme = \Drupal::theme()->getActiveTheme();

  foreach ($users as $user) {
    if ($user->get('field_ged')->value > 0) {
      if (!empty($user->get('user_picture')[0])) {
        $img_id = $user->get('user_picture')[0]->getValue()['target_id'];
        $img_file = File::load($img_id);
        $style = ImageStyle::load('party_member');
        $img_url = $style->buildUrl($img_file->getFileUri());
      } else {
        $img_url = $base_url . '/' . $theme->getPath() . '/images/avatar34x34.png';
      }
      $first_name = $user->get('field_first_name')->value;
      $last_name = $user->get('field_last_name')->value;
      $percentage = $users_data[$user->id()];
      //Calculate final ged amount
      $ged_amount = ($user->get('field_ged')->value * $percentage) / 100;
      $result[] = ['img_url' => $img_url,
        'name' => implode(" ", [$first_name, $last_name]),
        'percentage' => $percentage,
        'ged_amount' => $ged_amount,
        'id' => $user->id()
      ];
    }
  }
  return $result;
}
