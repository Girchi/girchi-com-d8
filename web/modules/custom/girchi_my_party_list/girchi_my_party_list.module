<?php

/**
 * @file
 * Contains girchi_my_party_list.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\girchi_notifications\Constants\NotificationConstants;

/**
 * Implements hook_help().
 */
function girchi_my_party_list_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the girchi_my_party_list module.
    case 'help.page.girchi_my_party_list':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for my party list form') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function girchi_my_party_list_theme() {
  return [
    'girchi_my_party_list' => [
      'render element' => 'children',
      'variables' => [
        'my_party_list' => NULL,
        'max_percentage' => NULL,
        'top_politicians' => NULL,
      ],
    ],
    'girchi_party_list' => [
      'variables' => [
        'supporters' => NULL,
      ],
    ],
    'politician_rating_block' => [
      'variables' => [
        'politicians' => NULL,
        'block_settings' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function girchi_my_party_list_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['combine']['#attributes']['class'][] = 'border-0 py-1 m-1 px-3 outline-none font-size-3 text-success w-100';
    $form['combine']['#attributes']['placeholder'] = t('Search...');
    $form['#attributes']['class'][] = 'w-100 max-w-md-200 pt-3  mt-2 mt-md-0 pt-md-0 navbar-search ml-auto text-right';
  }

}

/**
 * Implements hook_cron().
 */
function girchi_my_party_list_cron() {
  /**
   * @var \Drupal\girchi_my_party_list\PartyListCalculatorService $party_list_calculator
   */
  $party_list_calculator = Drupal::service('girchi_my_party_list.party_list_calculator');
  $party_list_calculator->calculate();
}

/**
 * Implements hook_user_presave().
 */
function girchi_my_party_list_user_presave(EntityInterface $user) {
  if ($user->original !== NULL && $user->original->get('field_politician')->value == 1 && $user->get('field_politician')->value == 0) {
    $user->set('field_political_ged', 0);
    $user->set('field_rating_in_party_list', NULL);
    $user_storage = Drupal::entityTypeManager()->getStorage('user');
    $user_ids = $user_storage
      ->getQuery()
      ->condition('field_ged', '0', '>')
      ->condition('field_my_party_list', $user->id(), 'IN')
      ->execute();
    if (!empty($user_ids)) {
      $users = $user_storage->loadMultiple($user_ids);
      foreach ($users as $supporter) {
        $supporter_party_list = $supporter->get('field_my_party_list')->getValue();
        $key = array_search($user->id(), array_column($supporter_party_list, 'target_id'));
        $supporter->get('field_my_party_list')->removeItem((int) $key);
        $supporter->save();
      }
    }
  }

  if (!$user->isNew()) {
    $supporters = $user->get('field_my_party_list')->value ? $user->get('field_my_party_list') : NULL;
    $user_id = $user->id();
    /** @var \Drupal\girchi_notifications\GetUserInfoService $getUserInfoService */
    $getUserInfoService = \Drupal::service('girchi_notifications.get_user_info');
    /** @var \Drupal\girchi_notifications\NotifyUserService $notifyUserService */
    $notifyUserService = \Drupal::service('girchi_notifications.notify_user');
    $type = NotificationConstants::PARTY_LIST;
    $type_en = NotificationConstants::PARTY_LIST_EN;
    $getUserInfo = $getUserInfoService->getUserInfo($user_id);
    if (!empty($supporters)) {
      $supporter_id_array = [];
      $original_supporter_id_array = [];
      foreach ($supporters as $supporter) {
        $supporter_id = $supporter->target_id;
        $supporter_id_array[] = $supporter_id;
        $ged_percentage = $supporter->value;
        $user_ged_amount = $user->get('field_ged')->value ? $user->get('field_ged')->value : 0;
        $supporter_ged_amount = round($user_ged_amount * $ged_percentage / 100);
        $longFormattedGed = number_format($supporter_ged_amount, 0, ',', ' ');
        // If party list wasn't empty:
        if (!empty($user->original->get('field_my_party_list')->value)) {
          $original_supporters = $user->original->get('field_my_party_list');
          foreach ($original_supporters as $original_supporter) {
            $original_user_id = $original_supporter->target_id;
            $original_supporter_id_array[] = $original_user_id;
            $original_value = $original_supporter->value;
            // Notify supporter that user decreased amount of ged percentage.
            if ($original_user_id == $supporter_id && $original_value > $ged_percentage) {
              $text = "${getUserInfo['full_name']}-მ შეგიმცირათ პოლიტიკური ჯედები ${original_value}%-დან ${ged_percentage}%-მდე - ${longFormattedGed}G.";
              $text_en = "${getUserInfo['full_name']} has decreased the amount of your political GED-s from ${original_value}% to ${ged_percentage}% - ${longFormattedGed}G.";
              $notifyUserService->notifyUser($supporter_id, $getUserInfo, $type, $type_en, $text, $text_en);
            }
            // Notify supporter that user increased amount of ged percentage.
            elseif ($original_user_id == $supporter_id && $original_value < $ged_percentage) {
              $text = "${getUserInfo['full_name']}-მ გაგიზარდათ პოლიტიკური ჯედები ${original_value}%-დან ${ged_percentage}%-მდე - ${longFormattedGed}G.";
              $text_en = "${getUserInfo['full_name']} has increased the amount of your political GED-s from ${original_value}% to ${ged_percentage}% - ${longFormattedGed}G.";
              $notifyUserService->notifyUser($supporter_id, $getUserInfo, $type, $type_en, $text, $text_en);
            }
          }
          // Notify if users party list wasn't empty
          // and supporter was added in it.
          if (!in_array($supporter_id, $original_supporter_id_array)) {
            $text = "${getUserInfo['full_name']}-მ დაგამატათ პირად პარტიულ სიაში.";
            $text_en = "${getUserInfo['full_name']} has added you to the private party list.";
            $notifyUserService->notifyUser($supporter_id, $getUserInfo, $type, $type_en, $text, $text_en);
          }

        }
        // Notify if current state of party list was empty
        // and supporter was added in it.
        else {
          $text = "${getUserInfo['full_name']}-მ დაგამატათ პირად პარტიულ სიაში.";
          $text_en = "${getUserInfo['full_name']} has added you to the private party list.";
          $notifyUserService->notifyUser($supporter_id, $getUserInfo, $type, $type_en, $text, $text_en);
        }
      }
      // Notify if current state of party list wasn't empty
      // and supporter was removed from it.
      if (!empty($user->original->get('field_my_party_list')->value)) {
        foreach ($user->original->get('field_my_party_list') as $origin_supporter) {
          $original_supporter_id = $origin_supporter->target_id;
          if (!in_array($original_supporter_id, $supporter_id_array)) {
            $text = "${getUserInfo['full_name']}-მ წაგშალათ პირადი პარტიული სიიდან.";
            $text_en = "${getUserInfo['full_name']} has removed you from private party list.";
            $notifyUserService->notifyUser($original_supporter_id, $getUserInfo, $type, $type_en, $text, $text_en);
          }
        }
      }

    }
    // Notify if current state of party list was empty
    // and supporter was removed from it.
    elseif (empty($supporters) && !empty($user->original->get('field_my_party_list')->value)) {
      $supporters = $user->original->get('field_my_party_list');
      foreach ($supporters as $supporter) {
        $supporter_id = $supporter->target_id;
        $text = "${getUserInfo['full_name']}-მ წაგშალათ პირადი პარტიული სიიდან.";
        $text_en = "${getUserInfo['full_name']} has removed you from private party list.";
        $notifyUserService->notifyUser($supporter_id, $getUserInfo, $type, $type_en, $text, $text_en);

      }
    }

  }

}
