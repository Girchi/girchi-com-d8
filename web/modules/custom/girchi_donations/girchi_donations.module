<?php

/**
 * @file
 * Contains girchi_donations.module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use ABGEO\NBG\Currency;
use Carbon\Carbon;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_help().
 */
function girchi_donations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the girchi_donations module.
    case 'help.page.girchi_donations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Donations module for girchi.com') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function girchi_donations_theme() {
  return [
    'girchi_donations' => [
      'render element' => 'children',
      'variables' => [
        'right_block' => NULL,
        'form_single' => NULL,
        'form_multiple' => NULL,
      ],
    ],
    'girchi_donations_success' => [
      'render element' => 'children',
      'variables' => [
        'amount' => NULL,
        'auth' => NULL,
        'regular_donation' => NULL,
        'reg_data' => NULL,
      ],
    ],
    'girchi_donations_fail' => [
      'render element' => 'children',
    ],
    'regular_donations' => [
      'render element' => 'children',
      'variables' => [
        'regular_donations' => NULL,
        'regular_donation_form' => NULL,
        'politicians' => NULL,
        'terms' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function girchi_donations_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if (isset($form['created'])) {
      $created_filter = $form['created'];
      if (array_key_exists('max', $created_filter)) {
        $form['created']['max']['#title'] = 'დასასრული';
      }
    }
  }

  if ($form_id === 'single_donation_form') {
    $politician_id = \Drupal::request()->get('politician');
    if ($politician_id) {
      $form['politicians']['#default_value'] = $politician_id;
      $form['politicians']['#attributes']['disabled'] = 'disabled';
      $form['donation_aim']['#attributes']['disabled'] = 'disabled';
      $form['#cache'] = ['max-age' => 0];
    }
  }
}

/**
 * Implements hook_cron().
 */
function girchi_donations_cron() {
  $current_time = time();
  $hour = date('H', $current_time);
  $day = date('d', $current_time);
  /** @var \Drupal\Console\Core\Utils\KeyValueStorage $key_value */
  $key_value = Drupal::service('keyvalue')->get('girchi_donations');
  /** @var  \Drupal\Core\Logger\LoggerChannel $logger_factory */
  $logger_factory = Drupal::service('logger.factory')->get('girchi_donations');

  if ($hour > 21) {
    if ($day != $key_value->get('close_day')) {
      /** @var \Drupal\om_tbc_payments\Services\PaymentService $payment_service */
      $payment_service = Drupal::service('om_tbc_payments.payment_service');
      $payment_service->closeDay();
      $logger_factory->info("Day was closed !");
      $key_value->set('close_day', $day);
    }
  }
  if ($hour > 9) {
    if ($day != $key_value->get('usd_set_day')) {
      $usd = new Currency(Currency::CURRENCY_USD);
      /** @var \Drupal\Console\Core\Utils\KeyValueStorage $key_value */
      $key_value->set('usd', $usd->getCurrency());
      $key_value->set('usd_set_day', $day);
    }
  }
  if ($hour > 18) {
    try {
      $today = Carbon::now()
        ->format(DateTimeItemInterface::DATE_STORAGE_FORMAT);
      $logger_factory->info(
        sprintf('Start regular donation execution date: %s',
          Carbon::now()->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT))
      );
      /** @var \Drupal\om_tbc_payments\Services\PaymentService $omedia_payment */
      $omedia_payment = Drupal::service('om_tbc_payments.payment_service');
      /** @var \Drupal\girchi_donations\Utils\DonationUtils $donation_utils */
      $donation_utils = Drupal::service('girchi_donations.donation_utils');
      /** @var \Drupal\Core\Entity\EntityStorageBase $reg_donations_storage */
      $reg_donations_storage = \Drupal::entityTypeManager()
        ->getStorage('regular_donation');
      $reg_donations_ids = $reg_donations_storage->getQuery()
        ->condition('status', 'FAILED', '!=')
        ->condition('status', 'INITIAL', '!=')
        ->execute();

      if (!empty($reg_donations_ids)) {
        $reg_donations = $reg_donations_storage->loadMultiple($reg_donations_ids);
        /** @var \Drupal\girchi_donations\Entity\RegularDonation $reg_donation */
        foreach ($reg_donations as $reg_donation) {
          $frequency = $reg_donation->get('frequency')->value;
          /** @var DateTime $date */
          $date = $reg_donation->get('next_payment_date')->value;
          $status = $reg_donation->getStatus();
          $amount = (int) $reg_donation->get('amount')->value;
          $card_id = $reg_donation->get('card_id')->value;
          $user = $reg_donation->getOwnerId();
          $type = $reg_donation->get('type')->value;

          if ($type === '1') {
            $target_id = $reg_donation->get('aim_id')->target_id;
          }
          else {
            $target_id = $reg_donation->get('politician_id')->target_id;
          }
          if ($date == $today) {
            if ($status === 'ACTIVE') {
              $logger_factory->info(sprintf('Starting regular payment execution for user_id:%s ,card_id:%s', $user, $card_id));
              $result = $omedia_payment->executePayment($card_id, $amount, 'Regular Payment');
              if ($result === NULL) {
                $logger_factory->info(sprintf('Payment execution error for user_id: %s ,card_id: %s', $user, $card_id));
                continue;
              }
              else {
                $trans_id = $result['transaction_id'];
                $resp_result = $result['code'];
                if ($resp_result === '000') {
                  $status = 'OK';
                }
                else {
                  $status = 'FAILED';
                }
                $donation_utils->addDonationRecord($type, [
                  'trans_id' => $trans_id,
                  'user_id' => $user,
                  'amount' => $amount,
                  'status' => $status,
                ], $target_id);
                $logger_factory->info(sprintf('Regular donation execution finished for user: %s , status:%s', $user, $status));
                $logger_factory->info(sprintf('Donation status was updated to: %s', $status));
              }
            }
            $logger_factory->info(sprintf('Update next payment date for user: %s', $user));
            /** @var \Carbon\Carbon $payment_date */
            $payment_date = Carbon::createFromFormat(DateTimeItemInterface::DATE_STORAGE_FORMAT, $date);
            $next_payment_date = $payment_date->addMonths($frequency)
              ->toDateTime()
              ->setTimezone(new \DateTimezone(DateTimeItemInterface::STORAGE_TIMEZONE))
              ->format(DateTimeItemInterface::DATE_STORAGE_FORMAT);
            $reg_donation->set(
              'next_payment_date',
              $next_payment_date
            )
              ->save();
          }
        }
      }

    }
    catch (InvalidPluginDefinitionException $e) {
      $logger_factory->error($e->getMessage());
    }
    catch (PluginNotFoundException $e) {
      $logger_factory->error($e->getMessage());
    }
    catch (EntityStorageException $e) {
      $logger_factory->error($e->getMessage());
    }
    $logger_factory->info(
      sprintf('Regular payment execution finished. date: %s',
        Carbon::now()->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT))
    );

  }
}
