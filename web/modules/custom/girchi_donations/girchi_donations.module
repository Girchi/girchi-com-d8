<?php

/**
 * @file
 * Contains girchi_donations.module.
 */

use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use ABGEO\NBG\Currency;
use Drupal\Core\Database\Driver\mysql\Schema;
use Carbon\Carbon;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_help().
 */
function girchi_donations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the girchi_donations module.
    case 'help.page.girchi_donations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Donations module for girchi.com') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function girchi_donations_theme() {
  return [
    'girchi_donations' => [
      'render element' => 'children',
      'variables' => [
        'right_block' => NULL,
        'form_single' => NULL,
        'form_multiple' => NULL,
        'paypal_form' => NULL,
        'has_active_card' => NULL,
        'card_save_form' => NULL,
        'cards' => NULL,
        'aim_or_politicians' => NULL,
      ],
    ],
    'girchi_donations_success' => [
      'render element' => 'children',
      'variables' => [
        'amount' => NULL,
        'auth' => NULL,
        'regular_donation' => NULL,
        'reg_data' => NULL,
        'card' => NULL,
      ],
    ],
    'girchi_donations_fail' => [
      'render element' => 'children',
    ],
    'regular_donations' => [
      'render element' => 'children',
      'variables' => [
        'regular_donations' => NULL,
        'regular_donation_form' => NULL,
        'language' => NULL,
        'current_user_id' => NULL,
        'cards' => NULL,
        'aim_or_politicians' => NULL,
      ],
    ],
    'girchi_donations_regular_edit' => [
      'render element' => 'children',
      'variables' => [
        'entity_form' => NULL,
        'cards' => NULL,
        'card_helper' => NULL,
        'entity' => NULL,
        'donation_aim' => NULL,
        'politicians' => NULL,
        'current_politician_id' => NULL,
        'current_aim_id' => NULL,
      ],
    ],
    'girchi_donations_export' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function girchi_donations_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if (isset($form['created'])) {
      $created_filter = $form['created'];
      if (array_key_exists('max', $created_filter)) {
        $form['created']['max']['#title'] = 'დასასრული';
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function girchi_donations_cron() {
  $current_time = time();
  $hour = date('H', $current_time);
  $day = date('d', $current_time);
  /** @var \Drupal\Console\Core\Utils\KeyValueStorage $key_value */
  $key_value = Drupal::service('keyvalue')->get('girchi_donations');
  /** @var  \Drupal\Core\Logger\LoggerChannel $logger_factory */
  $logger_factory = Drupal::service('logger.factory')->get('girchi_donations');

  if ($hour > 21) {
    if ($day != $key_value->get('close_day')) {
      /** @var \Drupal\om_tbc_payments\Services\PaymentService $payment_service */
      $payment_service = Drupal::service('om_tbc_payments.payment_service');
      $payment_service->closeDay();
      $logger_factory->info("Day was closed !");
      $key_value->set('close_day', $day);
    }
  }
  if ($hour > 9) {
    if ($day != $key_value->get('usd_set_day')) {
      $usd = new Currency(Currency::CURRENCY_USD);
      $eur = new Currency(Currency::CURRENCY_EUR);
      /** @var \Drupal\Console\Core\Utils\KeyValueStorage $key_value */
      $key_value->set('usd', $usd->getCurrency());
      $key_value->set('usd_set_day', $day);

      $key_value->set('eur', $eur->getCurrency());

    }
  }
//  if ($hour > 18) {
//    if ($day != $key_value->get('execution_day')) {
//      try {
//        $today = Carbon::now()
//          ->format(DateTimeItemInterface::DATE_STORAGE_FORMAT);
//        $logger_factory->info(
//          sprintf('Start filling regular donation queue execution date: %s',
//            Carbon::now()
//              ->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT))
//        );
//        /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
//      /**  $queue_factory = \Drupal::service('queue');
//        /** @var \Drupal\Core\Entity\EntityStorageBase $reg_donations_storage */
//        $reg_donations_storage = \Drupal::entityTypeManager()
//          ->getStorage('regular_donation');
//        $reg_donations_ids = $reg_donations_storage->getQuery()
//          ->condition('status', 'FAILED', '!=')
//          ->condition('status', 'INITIAL', '!=')
//          ->condition('next_payment_date', $today)
//          ->execute();
//        if (!empty($reg_donations_ids)) {
//          $reg_donations = $reg_donations_storage->loadMultiple($reg_donations_ids);
//          $queue = $queue_factory->get('regular_donation_processor');
//          /** @var \Drupal\girchi_donations\Entity\RegularDonation $reg_donation */
//          foreach ($reg_donations as $reg_donation) {
//            $queue->createItem($reg_donation);
//          }
//        }
//        $logger_factory->info(
//          sprintf('Regular payment queue is ready. date: %s',
//            Carbon::now()
//              ->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT))
//        );
//        $key_value->set('execution_day', $day);
//      }
//      catch (InvalidPluginDefinitionException $e) {
//        $logger_factory->error($e->getMessage());
//      }
//      catch (PluginNotFoundException $e) {
//        $logger_factory->error($e->getMessage());
//      }
//    }
//  }
}

/**
 * Installing regular donation entity.
 */
function girchi_donations_update_8701() {

  try {
    $schema = new Schema(\Drupal::service('database'));
    if (!$schema->tableExists('regular_donation')) {
      \Drupal::entityTypeManager()->clearCachedDefinitions();
      \Drupal::entityDefinitionUpdateManager()
        ->installEntityType(\Drupal::entityTypeManager()
          ->getDefinition('regular_donation'));
    }
  }
  catch (PluginNotFoundException $e) {
    \Drupal::logger('girchi_donations')->error($e->getMessage());
  }

}
