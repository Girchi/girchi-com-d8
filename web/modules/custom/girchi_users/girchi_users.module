<?php

/**
 * @file
 * Contains girchi_users.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\girchi_notifications\Constants\NotificationConstants;
use Drupal\girchi_users\Event\UserLoginEvent;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function girchi_users_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the girchi_users module.
    case 'help.page.girchi_users':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for users') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function girchi_users_theme() {
  return [
    'girchi_users' => [
      'render element' => 'children',
      'variables' => [
        'uid' => NULL,
        'subtitle' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function girchi_users_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'change_pwd_form') {
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-lg btn-block btn-success text-uppercase mt-4 fix';

    $form['#after_build'][] = 'girchi_users_after_build';
  }

  if ($form_id == 'user_form') {
    unset($form['field_cover_photo']['widget'][0]['#description']);
    unset($form['field_cover_photo']['widget'][0]['#title']);
  }

  if ($form_id == "user_pass") {
    unset($form['name']['#title']);
    $form['name']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['name']['#attributes']['id'][] = 'email';
    $form['name']['#attributes']['placeholder'][] = t('Enter Email');

    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-lg btn-block btn-success text-uppercase mt-4 fix';
  }

  if ($form_id == 'user_pass_reset') {
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-lg btn-block btn-success text-uppercase mt-4 fix';
    $form['#after_build'][] = 'girchi_users_after_build';
    $form['#submit'][] = 'girchi_users_pass_reset_custom_submit';

  }

  if ($form_id = 'custom_badges_form') {
    $request = \Drupal::service('request_stack');
    $tid = $request->getCurrentRequest()->query->get('tid');
    $uid = $request->getCurrentRequest()->query->get('uid');
    if (!empty($uid) && !empty($tid)) {
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
      $form['badge']['#value'] = $tid;
      $form['user']['#default_value'] = $user;
    }

  }

}

/**
 * Custom submit handler .
 */
function girchi_users_after_build($form, &$form_state) {
  unset($form['account']['current_pass']['#title']);
  unset($form['account']['pass']['pass1']['#title']);
  unset($form['account']['pass']['pass2']['#title']);
  unset($form['account']['pass']['#attached']['drupalSettings']['password']['showStrengthIndicator']);
  unset($form['account']['current_pass']['#description']);

  $form['account']['current_pass']['#attributes']['class'][] = 'form-control form-control-lg fix';
  $form['account']['current_pass']['#attributes']['id'][] = 'password';
  $form['account']['current_pass']['#attributes']['placeholder'][] = t('Enter password');

  $form['account']['pass']['pass1']['#attributes']['class'][] = 'form-control form-control-lg fix';
  $form['account']['pass']['pass1']['#attributes']['id'][] = 'password';
  $form['account']['pass']['pass1']['#attributes']['placeholder'][] = t('Enter password');

  $form['account']['pass']['pass2']['#attributes']['class'][] = 'form-control form-control-lg fix';
  $form['account']['pass']['pass2']['#attributes']['id'][] = 'password';
  $form['account']['pass']['pass2']['#attributes']['placeholder'][] = t('Enter password');

  if ($form['#form_id'] == 'user_pass_reset') {
    unset($form['pass']['pass1']['#title']);
    unset($form['pass']['pass2']['#title']);
    unset($form['#attached']['drupalSettings']['password']['confirmTitle']);

    $form['pass']['pass1']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['pass']['pass1']['#attributes']['id'][] = 'password';
    $form['pass']['pass1']['#attributes']['placeholder'][] = t('Enter password');

    $form['pass']['pass2']['#attributes']['class'][] = 'form-control form-control-lg fix';
    $form['pass']['pass2']['#attributes']['id'][] = 'password';
    $form['pass']['pass2']['#attributes']['placeholder'][] = t('Enter password');

  }

  return $form;

}

/**
 * Implements hook_theme_suggestions_image_widget_alter().
 */
function girchi_users_theme_suggestions_image_widget_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'field_cover_photo') {
    $suggestions[] = 'image_widget__user__picture';
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function girchi_users_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#is_button'])) {
    if (in_array('remove_button', $variables['element']['#parents'])) {
      $suggestions[] = 'input__remove_button';
    }
  }

  if (!empty($variables['element']['#name']) && $variables['element']['#name'] == 'files[field_cover_photo_0]') {
    $suggestions[] = 'input__button__cover__photo';
  }

}

/**
 * Custom submit handler.
 */
function girchi_users_pass_reset_custom_submit(array $form, FormStateInterface $form_state) {
  user_logout();
  $url = Url::fromRoute('user.login')->toString();
  $url .= '?pass-reset=success';
  $response = new RedirectResponse($url);
  $response->send();
}

/**
 * Implements hook_user_login().
 */
function girchi_users_user_login(UserInterface $account) {
  $event = new UserLoginEvent($account);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(UserLoginEvent::USER_LOGIN, $event);

}

/**
 * Implements hook_user_insert().
 */
function girchi_users_user_insert(EntityInterface $user) {
  // Notify user that recently created user
  // Chose them as their referral.
  if (!empty($user->get('field_referral')->target_id)) {
    $referral_id = $user->get('field_referral')->target_id;
    /** @var \Drupal\girchi_notifications\NotifyUserService $notifyUserService */
    $notifyUserService = \Drupal::service('girchi_notifications.notify_user');
    $getUserInfo = [
      'full_name' => $user->name->value,
      'image' => file_create_url(drupal_get_path('theme', 'girchi') . '/images/avatar.png'),
    ];
    $text = "${getUserInfo['full_name']}-მ მოგნიშნათ თავის რეფერალად.";
    $text_en = "${getUserInfo['full_name']} tagged you as referral.";
    $type = 'რეფერალი';
    $type_en = 'referral';
    $notifyUserService->notifyUser($referral_id, $getUserInfo, $type, $type_en, $text, $text_en);
  }

}

/**
 * Implements hook_user_presave().
 */
function girchi_users_user_presave(EntityInterface $user) {
  if (!$user->isNew()) {
    $original_referral_id = !empty($user->original->get('field_referral')->target_id) ? $user->original->get('field_referral')->target_id : '';
    $referral_id = !empty($user->get('field_referral')->target_id) ? $user->get('field_referral')->target_id : '';
    $user_id = $user->id();
    /** @var \Drupal\girchi_notifications\GetUserInfoService $getUserInfoService */
    $getUserInfoService = \Drupal::service('girchi_notifications.get_user_info');
    /** @var \Drupal\girchi_notifications\NotifyUserService $notifyUserService */
    $notifyUserService = \Drupal::service('girchi_notifications.notify_user');
    $getUserInfo = $getUserInfoService->getUserInfo($user_id);
    $type = NotificationConstants::REFERRAL;
    $type_en = NotificationConstants::REFERRAL_EN;
    if (!empty($referral_id) && $original_referral_id != $referral_id) {
      // Notify user that someone chose them as their referral.
      $text = "${getUserInfo['full_name']}-მ მოგნიშნათ თავის რეფერალად.";
      $text_en = "${getUserInfo['full_name']} tagged you as referral";
      $notifyUserService->notifyUser($referral_id, $getUserInfo, $type, $type_en, $text, $text_en);

      // Inform user that someone removed them from referrals.
      if (!empty($original_referral_id)) {
        $text = "${getUserInfo['full_name']}-მ ამოგშალათ რეფერალებიდან.";
        $text_en = "${getUserInfo['full_name']} removed you from referral.";
        $notifyUserService->notifyUser($original_referral_id, $getUserInfo, $type, $type_en, $text, $text_en);
      }

    }

    if(empty($referral_id) && !empty($original_referral_id)){
      $text = "${getUserInfo['full_name']}-მ ამოგშალათ რეფერალებიდან.";
      $text_en = "${getUserInfo['full_name']} removed you from referral.";
      $notifyUserService->notifyUser($original_referral_id, $getUserInfo, $type, $type_en, $text, $text_en);
    }
  }

  /** @var \Drupal\girchi_users\UserBadgesChangeDetectionService $userBadgesChangeDetectionService */
  $userBadgesChangeDetectionService = \Drupal::service('girchi_users.user_badges_change_detection');
  $userBadgesChangeDetectionService->userBadgesChangeDetection($user);

}
