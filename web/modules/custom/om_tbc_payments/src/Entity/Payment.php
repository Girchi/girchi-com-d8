<?php

namespace Drupal\om_tbc_payments\Entity;

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Defines the Payment entity.
 *
 * @ingroup om_tbc_payments
 *
 * @ContentEntityType(
 *   id = "payment",
 *   label = @Translation("Payment"),
 *   base_table = "payment_entity",
 *   entity_keys = {
 *     "id" = "id",
 *     "trans_id" = "trans_id",
 *     "user_id" = "user_id"
 *   },
 * )
 **/
class Payment extends ContentEntityBase implements ContentEntityInterface {

  /**
   * Returns the Drupal user id.
   *
   * @return string
   *   The user id.
   */
  public function getUserId() {
    return $this->get('user_id')->getValue()[0]['target_id'];
  }

  /**
   * Returns the transaction id.
   *
   * @return string
   *   The transaction id.
   */
  public function getPaymentId() {
    return $this->get('trans_id')->value;
  }

  /**
   * Updates the created time field.
   *
   * @param int $timestamp
   *   The payment creation timestamp.
   *
   * @return \Drupal\om_tbc_payments\Entity\Payment
   *   Drupal Entity.
   */
  public function setCreatedTime($timestamp) {
    $this->set('created', $timestamp);
    return $this;
  }

  /**
   * Gets the user creation time.
   *
   * @return int
   *   Creation timestamp Payment entity.
   */
  public function getCreatedTime() {
    return $this->get('created')->value;
  }

  /**
   * Updates the user data changed time field.
   *
   * @param int $timestamp
   *   The payment changed timestamp.
   *
   * @return \Drupal\om_tbc_payments\Entity\Payment
   *   Drupal Payment Entity.
   */
  public function setChangedTime($timestamp) {
    $this->set('changed', $timestamp);
    return $this;
  }

  /**
   * Gets the changed time field.
   *
   * @return int
   *   Changed timestamp Payment entity.
   */
  public function getChangedTime() {
    return $this->get('changed')->value;
  }

  /**
   * Updates Status.
   *
   * @param string $status
   *   Status of payment.
   *
   * @return \Drupal\om_tbc_payments\Entity\Payment
   *   Drupal Payment Entity.
   */
  public function setStatus($status) {
    $this->set('status', $status);
    return $this;
  }

  /**
   * Gets the changed time field.
   *
   * @return string
   *   Changed timestamp Payment entity.
   */
  public function getStatus() {
    return $this->get('status')->value;
  }

  /**
   * {@inheritdoc}
   */
  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {

    $fields['id'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('ID'))
      ->setDescription(t('The ID of payment.'))
      ->setReadOnly(TRUE)
      ->setSetting('unsigned', TRUE);

    $fields['trans_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Transaction ID'))
      ->setDescription(t('Transaction id generated by merchant'))
      ->setReadOnly(TRUE);

    // The ID of user account associated.
    $fields['user_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('User ID'))
      ->setDescription(t('The Drupal uid associated with payment.'))
      ->setSetting('target_type', 'user');

    // Status.
    $fields['status'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Status'))
      ->setDescription(t('Status of payment.'))
      ->setDefaultValue('INITIAL');

    // Amount of payment.
    $fields['amount'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Amount of money'))
      ->setDescription(t('Amount of money'));

    // IP address.
    $fields['ip_address'] = BaseFieldDefinition::create('string')
      ->setLabel(t('IP Address'))
      ->setDescription(t('IP Address of user.'));

    // Currency code.
    $fields['currency_code'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Currency code'))
      ->setDescription(t('Currency code.'));

    // Description for payment.
    $fields['description'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Description of payment'))
      ->setDescription(t('Description of payment.'));

    // Payment creation time.
    $fields['created'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Created'))
      ->setDescription(t('The time that the entity was created.'));

    // Payment modified time.
    $fields['changed'] = BaseFieldDefinition::create('changed')
      ->setLabel(t('Changed'))
      ->setDescription(t('The time that the entity was last edited.'));

    return $fields;
  }

}
